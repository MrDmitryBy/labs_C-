//Кирилло Дмитрий, 2 курс, 5 группа ММФ БГУ. Вариант 5
#include <iostream>
#include <string>
#include <fstream>
#include <ctype.h>
#include <algorithm>

using namespace std;

class Worker{

private:
	string surname;
	string name;
	string position;
	int year;
	double salary;

public:
	Worker();
	void setSurname(string surname) {
		this->surname = surname;
	}
	void setName(string name) {
		this->name = name;
	}
	void setPosition(string position) {
		this->position = position;
	}

	void setYear(int year) {
		this->year = year;
	}
	void setSalary(double salary) {
		this->salary = salary;
	}
	string getSurname() {
		return surname;
	}
	string getName() {
		return name;
	}
	string getPosition() {
		return position;
	}
	int getYear() {
		return year;
	}
	double getSalary() {
		return salary;
	}
	void Show();
	void listExpWorkWorkers(int expYear);
	void listSalaryWorkers(double expSalary);
	void listPositionWorkers(string expPosition);
};

Worker::Worker()
{
	surname = name = position = "Unknown";
	salary = 0;
}
void Worker::Show()
{
	cout << "Worker     : " << getSurname() << " " << getName() << endl;
}
void Worker::listExpWorkWorkers(int expYear)
{
	if (2020 - getYear() > expYear) {
		Show();
		cout << "--------------------------" << endl;
	}
}
void Worker::listSalaryWorkers(double expSalary)
{
	if (expSalary < getSalary()) {
		Show();
		cout << "--------------------------" << endl;
	}
}

void Worker::listPositionWorkers(string exPos) {
	if(getPosition().compare(exPos) == 0){
	//if (((transform(getPosition().begin(),
		//getPosition().end(), getPosition().begin(), tolower)).compare((transform(
			//exPos.begin(),exPos.end(), exPos.begin(), tolower)))) == 0) {
		Show();
		cout << "--------------------------" << endl;
	}
}

ostream& operator<<(ostream& os, const Worker& worker) {

	return os;
}
istream& operator>>(istream& is, Worker& worker) {
	return is;
}

//=========    main   ================
int main()
{	
	int n;
	cout << "Enter the number of workers you want to add : "; cin >> n;
	try {
		if (cin.fail() | n <= 0) {
			throw exception("You make a mistake! Please, enter a natural number!");
		}
		else {
			cout << "There are " << n << " workers to add" << endl;
			Worker* list = new Worker[n];
			for (int i = 0; i < n; i++) {
				string workerSurname;
				string workerName;
				string workerPosition;
				int workerYear;
				double workerSalary;
				cout << "Enter the " << i + 1 << " surname of a worker: ";
				cin >> workerSurname;
				list[i].setSurname(workerSurname);
				cout << "Enter the " << i + 1 << " name of a worker: ";
				cin >> workerName;
				list[i].setName(workerName);
				cout << "Enter position for the " << i + 1 << " worker: ";
				cin >> workerPosition;
				list[i].setPosition(workerPosition);
				cout << "Enter work experience for the " << i + 1 << " worker: ";
				cin >> workerYear;
				list[i].setYear(workerYear);
				cout << "Enter salary for the " << i + 1 << " worker: ";
				cin >> workerSalary;
				list[i].setSalary(workerSalary);
			}
			cout << "=========WORKERS=============" << endl;
			for (int i = 0; i < n; i++) {
				list[i].Show();
				cout << "--------------------------" << endl;
		}
			cout << "=========WORK EXPERINCE=============" << endl;
			for (int i = 0; i < n; i++) {
				list[i].listExpWorkWorkers(2);
			}
			cout << "=========WORKERS SALARY=============" << endl;
			for (int i = 0; i < n; i++) {
				list[i].listSalaryWorkers(1000.12);
			}
			cout << "=========WORKERS POSITION=============" << endl;
			for (int i = 0; i < n; i++) {
				list[i].listPositionWorkers("loh");
			}
			delete[] list;
			cout << "Work is over!" << endl;
		}
	}
	catch (const exception &ex) {
		cout << ex.what() << endl;
	}
	return 0;
}